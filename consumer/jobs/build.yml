parameters:
  - name: containerRegistryUrl
    type: string
  - name: containerRegistryServiceConnection
    type: string
  - name: unitTestProject
    type: string
  - name: packageName
    type: string
  - name: ddlFileName
    type: string
  - name: buildNumber
    type: string

jobs:
  - job: build_and_push
    displayName: Build & Push Docker image to registry
    steps:
      - checkout: self
        persistCredentials: true

      - checkout: platform

      - task: Docker@2
        displayName: Login to ACR
        inputs:
          command: login
          containerRegistry: ${{ parameters.containerRegistryServiceConnection }}

      - bash: |
          echo '##vso[task.setvariable variable=buildRepositoryName]${{ split(variables['Build.Repository.Name'], '/')[1] }}'
        displayName: Remove GitHub user from Build.Repository.Name

      - bash: $(Build.SourcesDirectory)/example-platform-dotnet-pipeline/consumer/steps/run_unit_tests.sh ${{ parameters.containerRegistryUrl }} $(pwd) ${{ parameters.unitTestProject }}
        workingDirectory: $(Build.SourcesDirectory)/$(buildRepositoryName)
        displayName: Run unit tests

      - task: PublishTestResults@2
        displayName: Publish unit test results
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: VSTest
          testResultsFiles: '**/*.trx'
          testRunTitle: Build

      - task: PublishCodeCoverageResults@1
        displayName: Publish code coverage results
        condition: succeededOrFailed()
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: $(Build.SourcesDirectory)/$(Build.Repository.Name)/unit-test-results/**/coverage.cobertura.xml
          pathToSources: $(Build.SourcesDirectory)/$(Build.Repository.Name)

      - bash: $(Build.SourcesDirectory)/example-platform-dotnet-pipeline/consumer/steps/build_consumer_application.sh ${{ parameters.containerRegistryUrl }} $(pwd) ${{ parameters.packageName }} ${{ parameters.buildNumber }}
        workingDirectory: $(Build.SourcesDirectory)/$(buildRepositoryName)
        displayName: Build an application

      - bash: $(Build.SourcesDirectory)/example-platform-dotnet-pipeline/consumer/steps/build_docker_consumer_image.sh ${{ parameters.containerRegistryUrl }} $(buildRepositoryName) ${{ parameters.ddlFileName }} $(pwd) ${{ parameters.buildNumber }}
        workingDirectory: $(Build.SourcesDirectory)/$(buildRepositoryName)
        displayName: Build Docker image

      - task: Docker@2
        displayName: Push Docker image
        inputs:
          command: push
          containerRegistry: ${{ parameters.containerRegistryServiceConnection }}
          repository: $(buildRepositoryName)
          tags: ${{ parameters.buildNumber }}
