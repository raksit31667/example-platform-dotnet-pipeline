parameters:
  - name: containerRegistryUrl
    type: string
  - name: buildNumber
    type: string

jobs:
  - deployment: deploy
    displayName: Deploy
    environment: exampleplatformaca
    variables:
      - group: exampleplatformaca
      - name: terraformVersion
        value: '1.3.0'
      - name: azureSubscriptionServiceConnectionName
        value: example-platform-azure-kubernetes
      - name: terraformStateResourceGroupName
        value: example-platform-azure-kubernetes
      - name: terraformStateStorageAccountName
        value: exampleplatformacastate
      - name: terraformStateStorageAccountContainerName
        value: terraform-state
      - name: deploymentEnvironment
        value: exampleplatformaca
      - name: containerRegistryUrl
        value: ${{ parameters.containerRegistryUrl }}
      - name: buildNumber
        value: ${{ parameters.buildNumber }}
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
              persistCredentials: true

            - checkout: platform

            - bash: |
                echo '##vso[task.setvariable variable=buildRepositoryName]${{ split(variables['Build.Repository.Name'], '/')[1] }}'
              displayName: Remove GitHub user from Build.Repository.Name

            - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
              displayName: Install Terraform
              inputs:
                terraformVersion: $(terraformVersion)

            - bash: |
                cat $(Build.SourcesDirectory)/$(buildRepositoryName)/pipeline/aca/terraform.tfvars >> terraform.tfvars
              displayName: Combine consumer-provided and platform-provided terraform.tfvars files
              workingDirectory: $(Build.SourcesDirectory)/example-platform-dotnet-pipeline/consumer/terraform

            - task: qetza.replacetokens.replacetokens-task.replacetokens@3
              displayName: Insert pipeline variables into terraform.tfvars
              inputs:
                rootDirectory: $(Build.SourcesDirectory)/example-platform-dotnet-pipeline
                targetFiles: '**/consumer/terraform/terraform.tfvars'
                escapeType: none
                enableTransforms: true

            - task: TerraformCLI@0
              displayName: Terraform init
              inputs:
                command: init
                backendType: azurerm
                backendServiceArm: ${{ variables.azureSubscriptionServiceConnectionName }}
                backendAzureRmResourceGroupName: ${{ variables.terraformStateResourceGroupName }}
                backendAzureRmStorageAccountName: ${{ variables.terraformStateStorageAccountName }}
                backendAzureRmContainerName: ${{ variables.terraformStateStorageAccountContainerName }}
                backendAzureRmKey: $(buildRepositoryName).tfstate
                workingDirectory: $(Build.SourcesDirectory)/example-platform-dotnet-pipeline/consumer/terraform

            - task: TerraformCLI@0
              displayName: Terraform validate
              inputs:
                command: validate
                backendType: azurerm
                environmentServiceName: ${{ variables.azureSubscriptionServiceConnectionName }}
                workingDirectory: $(Build.SourcesDirectory)/example-platform-dotnet-pipeline/consumer/terraform

            - task: TerraformCLI@0
              displayName: Terraform plan
              inputs:
                command: plan
                backendType: azurerm
                commandOptions: -out=tfplan -input=false
                environmentServiceName: ${{ variables.azureSubscriptionServiceConnectionName }}
                workingDirectory: $(Build.SourcesDirectory)/example-platform-dotnet-pipeline/consumer/terraform

            - task: TerraformCLI@0
              displayName: Terraform apply
              inputs:
                command: apply
                backendType: azurerm
                environmentServiceName: ${{ variables.azureSubscriptionServiceConnectionName }}
                workingDirectory: $(Build.SourcesDirectory)/example-platform-dotnet-pipeline/consumer/terraform
